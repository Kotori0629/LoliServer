--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -38,6 +_,9 @@
 import net.minecraft.util.SignatureValidator;
 import net.minecraft.world.entity.player.ProfilePublicKey;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.craftbukkit.v1_19_R1.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent;
 import org.slf4j.Logger;
 
 public class ServerLoginPacketListenerImpl implements TickablePacketListener, ServerLoginPacketListener {
@@ -65,7 +_,13 @@
    }
 
    public void m_9933_() {
-      if (this.f_10019_ == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
+      if (this.f_10019_ == State.NEGOTIATING) {
+         // We force the state into "NEGOTIATING" which is otherwise unused. Once we're completed we move the negotiation onto "READY_TO_ACCEPT"
+         // Might want to promote player object creation to here as well..
+         boolean negotiationComplete = net.minecraftforge.network.NetworkHooks.tickNegotiation(this, this.f_10013_, this.f_10024_);
+         if (negotiationComplete)
+            this.f_10019_ = State.READY_TO_ACCEPT;
+      } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
          this.m_10055_();
       } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.DELAY_ACCEPT) {
          ServerPlayer serverplayer = this.f_10018_.m_6846_().m_11259_(this.f_10021_.getId());
@@ -97,26 +_,59 @@
 
    }
 
+   // CraftBukkit start
+   public void disconnect(String s) {
+      m_10053_(Component.m_237113_(s));
+   }
+   // CraftBukkit end
+
+   // Spigot start
+   public void initUUID()
+   {
+      UUID uuid;
+      if ( f_10013_.spoofedUUID != null )
+      {
+         uuid = f_10013_.spoofedUUID;
+      } else
+      {
+         uuid =  UUIDUtil.m_235879_( this.f_10021_.getName() );
+      }
+
+      this.f_10021_ = new GameProfile( uuid, this.f_10021_.getName() );
+
+      if (f_10013_.spoofedProfile != null)
+      {
+         for ( com.mojang.authlib.properties.Property property : f_10013_.spoofedProfile )
+         {
+            if (!ServerHandshakePacketListenerImpl.PROP_PATTERN.matcher(property.getName()).matches()) continue;
+            this.f_10021_.getProperties().put( property.getName(), property );
+         }
+      }
+   }
+   // Spigot end
+
    public void m_10055_() {
       ProfilePublicKey profilepublickey = null;
       if (!this.f_10021_.isComplete()) {
-         this.f_10021_ = this.m_10038_(this.f_10021_);
+         // this.gameProfile = this.createFakeProfile(this.gameProfile); // Spigot - Moved to initUUID
       } else {
          try {
-            SignatureValidator signaturevalidator = this.f_10018_.m_236739_();
-            profilepublickey = m_215256_(this.f_240234_, this.f_10021_.getId(), signaturevalidator, this.f_10018_.m_214005_());
-         } catch (ProfilePublicKey.ValidationException profilepublickey$validationexception) {
-            f_10015_.error("Failed to validate profile key: {}", (Object)profilepublickey$validationexception.getMessage());
+            SignatureValidator signatureValidator = this.f_10018_.m_236739_();
+
+            profilepublickey = m_215256_(this.f_240234_, this.f_10021_.getId(), signatureValidator, this.f_10018_.m_214005_());
+         } catch (ProfilePublicKey.ValidationException e) {
+            f_10015_.error("Faild to validate profile key: {}", e.getMessage());
             if (!this.f_10013_.m_129531_()) {
-               this.m_10053_(profilepublickey$validationexception.m_237308_());
+               this.m_10053_(e.m_237308_());
                return;
             }
          }
       }
 
-      Component component1 = this.f_10018_.m_6846_().m_6418_(this.f_10013_.m_129523_(), this.f_10021_);
-      if (component1 != null) {
-         this.m_10053_(component1);
+      //Component component1 = this.server.getPlayerList().canPlayerLogin(this.connection.getRemoteAddress(), this.gameProfile);
+      ServerPlayer lolimoe$serverplayer = this.f_10018_.m_6846_().canPlayerLogin(this, this.f_10021_, profilepublickey);
+      if (lolimoe$serverplayer == null) {
+         //this.disconnect(component1);
       } else {
          this.f_10019_ = ServerLoginPacketListenerImpl.State.ACCEPTED;
          if (this.f_10018_.m_6328_() >= 0 && !this.f_10013_.m_129531_()) {
@@ -129,12 +_,12 @@
          ServerPlayer serverplayer = this.f_10018_.m_6846_().m_11259_(this.f_10021_.getId());
 
          try {
-            ServerPlayer serverplayer1 = this.f_10018_.m_6846_().m_215624_(this.f_10021_, profilepublickey);
+            //ServerPlayer serverplayer1 = this.server.getPlayerList().getPlayerForLogin(this.gameProfile, profilepublickey);
             if (serverplayer != null) {
                this.f_10019_ = ServerLoginPacketListenerImpl.State.DELAY_ACCEPT;
-               this.f_10024_ = serverplayer1;
+               this.f_10024_ = lolimoe$serverplayer;
             } else {
-               this.m_143699_(serverplayer1);
+               this.m_143699_(lolimoe$serverplayer);
             }
          } catch (Exception exception) {
             f_10015_.error("Couldn't place player in world", (Throwable)exception);
@@ -178,18 +_,43 @@
       GameProfile gameprofile = this.f_10018_.m_236731_();
       if (gameprofile != null && p_10047_.f_238040_().equalsIgnoreCase(gameprofile.getName())) {
          this.f_10021_ = gameprofile;
-         this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+         this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
       } else {
          this.f_10021_ = new GameProfile((UUID)null, p_10047_.f_238040_());
          if (this.f_10018_.m_129797_() && !this.f_10013_.m_129531_()) {
             this.f_10019_ = ServerLoginPacketListenerImpl.State.KEY;
             this.f_10013_.m_129512_(new ClientboundHelloPacket("", this.f_10018_.m_129790_().getPublic().getEncoded(), this.f_10017_));
          } else {
-            this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+            // Spigot start
+            // Paper start - Cache authenticator threads
+            authenticatorPool.execute(() -> {
+               try {
+                  this.initUUID();
+                  new LoginHandler().fireEvents();
+               } catch (Exception ex) {
+                  this.disconnect("Failed to verify username!");
+                  f_10018_.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + this.f_10021_.getName(), ex);
+               }
+            });
+            // Paper end
+            // Spigot end
          }
 
       }
    }
+
+   // Paper start - Cache authenticator threads
+   private static final AtomicInteger threadId = new AtomicInteger(0);
+   private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(
+           r -> {
+              Thread ret = new Thread(r, "User Authenticator #" + threadId.incrementAndGet());
+
+              ret.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_10015_));
+
+              return ret;
+           }
+   );
+   // Paper end
 
    public static boolean m_203792_(String p_203793_) {
       return p_203793_.chars().filter((p_203791_) -> {
@@ -222,19 +_,19 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + f_10014_.incrementAndGet()) {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, "User Authenticator #" + f_10014_.incrementAndGet()) {
          public void run() {
             GameProfile gameprofile = ServerLoginPacketListenerImpl.this.f_10021_;
 
             try {
                ServerLoginPacketListenerImpl.this.f_10021_ = ServerLoginPacketListenerImpl.this.f_10018_.m_129925_().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s, this.m_10064_());
                if (ServerLoginPacketListenerImpl.this.f_10021_ != null) {
-                  ServerLoginPacketListenerImpl.f_10015_.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.f_10021_.getName(), ServerLoginPacketListenerImpl.this.f_10021_.getId());
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  //ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.gameProfile.getName(), ServerLoginPacketListenerImpl.this.gameProfile.getId());
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Failed to verify username but will let them in anyway!");
                   ServerLoginPacketListenerImpl.this.f_10021_ = gameprofile;
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(Component.m_237115_("multiplayer.disconnect.unverified_username"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Username '{}' tried to join with an invalid session", (Object)gameprofile.getName());
@@ -243,7 +_,7 @@
                if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Authentication servers are down but will let them in anyway!");
                   ServerLoginPacketListenerImpl.this.f_10021_ = gameprofile;
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(Component.m_237115_("multiplayer.disconnect.authservers_down"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Couldn't verify username because servers are unavailable");
@@ -263,6 +_,7 @@
    }
 
    public void m_7223_(ServerboundCustomQueryPacket p_10045_) {
+      if (!net.minecraftforge.network.NetworkHooks.onCustomPayload(p_10045_, this.f_10013_))
       this.m_10053_(Component.m_237115_("multiplayer.disconnect.unexpected_query_response"));
    }
 
@@ -280,4 +_,47 @@
       DELAY_ACCEPT,
       ACCEPTED;
    }
+
+   // Spigot start
+   public class LoginHandler {
+
+      public void fireEvents() throws Exception {
+         String playerName = f_10021_.getName();
+         java.net.InetAddress address = ((java.net.InetSocketAddress) f_10013_.m_129523_()).getAddress();
+         java.util.UUID uniqueId = f_10021_.getId();
+         final org.bukkit.craftbukkit.v1_19_R1.CraftServer server = ServerLoginPacketListenerImpl.this.f_10018_.server;
+
+         AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+         server.getPluginManager().callEvent(asyncEvent);
+
+         if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+            if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+               event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+            }
+            Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<>() {
+               @Override
+               protected PlayerPreLoginEvent.Result evaluate() {
+                  server.getPluginManager().callEvent(event);
+                  return event.getResult();
+               }
+            };
+
+            ServerLoginPacketListenerImpl.this.f_10018_.processQueue.add(waitable);
+            if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+               m_10053_(Component.m_130674_(event.getKickMessage()));
+               return;
+            }
+         } else {
+            if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+               m_10053_(Component.m_130674_(asyncEvent.getKickMessage()));
+               return;
+            }
+         }
+         // CraftBukkit end
+         f_10015_.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.f_10021_.getName(), ServerLoginPacketListenerImpl.this.f_10021_.getId());
+         ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
+      }
+   }
+   // Spigot end
 }
