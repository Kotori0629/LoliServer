--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -10,6 +_,8 @@
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.DynamicOps;
+import com.mojang.serialization.Lifecycle;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
@@ -24,18 +_,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.security.KeyPair;
-import java.util.Arrays;
-import java.util.Base64;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.concurrent.RejectedExecutionException;
@@ -45,6 +_,11 @@
 import java.util.function.Function;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+
+import joptsimple.OptionSet;
+import moe.kotori.LoliServer;
+import moe.kotori.server.utils.BukkitInjector;
+import moe.kotori.server.utils.MinecraftServerSetter;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
@@ -58,6 +_,7 @@
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.data.worldgen.features.MiscOverworldFeatures;
 import net.minecraft.gametest.framework.GameTestTicker;
+import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.ChatDecorator;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
@@ -130,6 +_,7 @@
 import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.border.BorderChangeListener;
 import net.minecraft.world.level.border.WorldBorder;
+import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.PatrolSpawner;
@@ -144,6 +_,7 @@
 import net.minecraft.world.level.storage.LevelResource;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.PlayerDataStorage;
+import net.minecraft.world.level.storage.PrimaryLevelData;
 import net.minecraft.world.level.storage.ServerLevelData;
 import net.minecraft.world.level.storage.WorldData;
 import net.minecraft.world.level.storage.loot.ItemModifierManager;
@@ -151,7 +_,17 @@
 import net.minecraft.world.level.storage.loot.PredicateManager;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.level.LevelEvent;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_19_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_19_R1.util.CraftChatMessage;
+import org.bukkit.craftbukkit.v1_19_R1.util.LazyPlayerSet;
+import org.bukkit.event.player.AsyncPlayerChatPreviewEvent;
+import org.bukkit.event.server.ServerLoadEvent;
+import org.bukkit.event.world.WorldInitEvent;
+import org.bukkit.event.world.WorldLoadEvent;
 import org.slf4j.Logger;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
@@ -187,14 +_,14 @@
    private MinecraftServer.TimeProfiler f_177876_;
    private boolean f_177877_;
    private final ServerConnectionListener f_129755_;
-   private final ChunkProgressListenerFactory f_129756_;
+   public final ChunkProgressListenerFactory f_129756_;
    private final ServerStatus f_129757_ = new ServerStatus();
    private final RandomSource f_129758_ = RandomSource.m_216327_();
    private final DataFixer f_129759_;
    private String f_129760_;
    private int f_129761_ = -1;
    public final RegistryAccess.Frozen f_129746_;
-   public final Map<ResourceKey<Level>, ServerLevel> f_129762_ = Maps.newLinkedHashMap();
+   private Map<ResourceKey<Level>, ServerLevel> f_129762_ = Maps.newLinkedHashMap();
    private PlayerList f_129763_;
    private volatile boolean f_129764_ = true;
    private boolean f_129765_;
@@ -230,7 +_,7 @@
    private final FrameTimer f_129735_ = new FrameTimer();
    private boolean f_129736_;
    private float f_129737_;
-   private final Executor f_129738_;
+   public final Executor f_129738_;
    @Nullable
    private String f_129739_;
    public MinecraftServer.ReloadableResources f_129740_;
@@ -238,9 +_,29 @@
    protected final WorldData f_129749_;
    private volatile boolean f_195494_;
 
+   // CraftBukkit start
+   public DataPackConfig datapackconfiguration;
+   public DynamicOps<Tag> registryreadops;
+   public CraftServer server;
+   public OptionSet options;
+   public org.bukkit.command.ConsoleCommandSender console;
+   public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+   public static int currentTick = 0; // Paper - Further improve tick loop
+   public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+   public int autosavePeriod;
+   public Commands vanillaCommandDispatcher;
+   private boolean forceTicks;
+   // CraftBukkit end
+   // Spigot start
+   public static final int TPS = 20;
+   public static final int TICK_TIME = 1000000000 / TPS;
+   private static final int SAMPLE_INTERVAL = 20; // Paper
+   public final double[] recentTps = new double[ 4 ]; // Purpur
+   // Spigot end
+
    public static <S extends MinecraftServer> S m_129872_(Function<Thread, S> p_129873_) {
       AtomicReference<S> atomicreference = new AtomicReference<>();
-      Thread thread = new Thread(() -> {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, () -> {
          atomicreference.get().m_130011_();
       }, "Server thread");
       thread.setUncaughtExceptionHandler((p_177909_, p_177910_) -> {
@@ -256,8 +_,15 @@
       return s;
    }
 
+   private void preInitServer(OptionSet options, DataPackConfig datapackconfiguration, DynamicOps<Tag> registryreadops) {
+      this.options = options;
+      this.datapackconfiguration = datapackconfiguration;
+      this.registryreadops = registryreadops;
+   }
+
    public MinecraftServer(Thread p_236723_, LevelStorageSource.LevelStorageAccess p_236724_, PackRepository p_236725_, WorldStem p_236726_, Proxy p_236727_, DataFixer p_236728_, Services p_236729_, ChunkProgressListenerFactory p_236730_) {
       super("Server");
+      this.preInitServer(MinecraftServerSetter.getOptions(), MinecraftServerSetter.getDataPackConfig(), MinecraftServerSetter.getRegistryReadOps()); // LoliServer
       this.f_129746_ = p_236726_.f_206894_();
       this.f_129749_ = p_236726_.f_206895_();
       if (!this.f_129749_.m_5961_().m_204655_().m_142003_(LevelStem.f_63971_)) {
@@ -280,8 +_,18 @@
          this.f_236720_ = new StructureTemplateManager(p_236726_.f_206892_(), p_236724_, p_236728_);
          this.f_129725_ = p_236723_;
          this.f_129738_ = Util.m_183991_();
+         // CraftBukkit start
+         this.vanillaCommandDispatcher = p_236726_.f_206893_().f_206847_;
+
+         // Try to see if we're actually running in a terminal, disable jline if not
+         if (System.console() == null && System.getProperty("jline.terminal") == null) {
+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+            org.bukkit.craftbukkit.Main.useJline = false;
+         }
       }
+      // CraftBukkit end
    }
+
 
    private void m_129841_(DimensionDataStorage p_129842_) {
       p_129842_.m_164861_(this.m_129896_()::m_180013_, this.m_129896_()::m_180015_, "scoreboard");
@@ -327,11 +_,13 @@
       Registry<LevelStem> registry = worldgensettings.m_204655_();
       LevelStem levelstem = registry.m_6246_(LevelStem.f_63971_);
       ServerLevel serverlevel = new ServerLevel(this, this.f_129738_, this.f_129744_, serverleveldata, Level.f_46428_, levelstem, p_129816_, flag, j, list, true);
+      BukkitInjector.injectEnvironment(registry); // LoliServer
       this.f_129762_.put(Level.f_46428_, serverlevel);
       DimensionDataStorage dimensiondatastorage = serverlevel.m_8895_();
       this.m_129841_(dimensiondatastorage);
       this.f_129732_ = new CommandStorage(dimensiondatastorage);
       WorldBorder worldborder = serverlevel.m_6857_();
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Load(f_129762_.get(Level.f_46428_)));
       if (!serverleveldata.m_6535_()) {
          try {
             m_177896_(serverlevel, serverleveldata, worldgensettings.m_64660_(), flag);
@@ -364,11 +_,22 @@
             ResourceKey<Level> resourcekey1 = ResourceKey.m_135785_(Registry.f_122819_, resourcekey.m_135782_());
             DerivedLevelData derivedleveldata = new DerivedLevelData(this.f_129749_, serverleveldata);
             ServerLevel serverlevel1 = new ServerLevel(this, this.f_129738_, this.f_129744_, derivedleveldata, resourcekey1, entry.getValue(), p_129816_, flag, j, ImmutableList.of(), false);
+            serverlevel1.worldDataServer = new PrimaryLevelData(new LevelSettings(derivedleveldata.m_5462_(), derivedleveldata.m_5464_(), derivedleveldata.m_5466_(), derivedleveldata.m_5472_(), false, derivedleveldata.m_5470_(), this.datapackconfiguration), ((PrimaryLevelData) serverleveldata).m_5961_(), Lifecycle.stable()); //Fixme
             worldborder.m_61929_(new BorderChangeListener.DelegateBorderChangeListener(serverlevel1.m_6857_()));
             this.f_129762_.put(resourcekey1, serverlevel1);
+            if (this.server.scoreboardManager == null) {
+               this.server.scoreboardManager = new org.bukkit.craftbukkit.v1_19_R1.scoreboard.CraftScoreboardManager(this, serverlevel1.m_6188_());
+            }
+            if (serverlevel1.generator != null) {
+               serverlevel1.getWorld().getPopulators().addAll(serverlevel1.generator.getDefaultPopulators(serverlevel1.getWorld()));
+            }
+            Bukkit.getPluginManager().callEvent(new WorldInitEvent(f_129762_.get(resourcekey).getWorld()));
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Load(f_129762_.get(resourcekey)));
          }
       }
-
+      this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
+      this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
+      this.f_129755_.acceptConnections();
       worldborder.m_61931_(serverleveldata.m_5813_());
    }
 
@@ -377,6 +_,7 @@
          p_177898_.m_7250_(BlockPos.f_121853_.m_6630_(80), 0.0F);
       } else {
          ServerChunkCache serverchunkcache = p_177897_.m_7726_();
+         if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(p_177897_, p_177898_)) return;
          ChunkPos chunkpos = new ChunkPos(serverchunkcache.m_214994_().m_224579_().m_183230_());
          int i = serverchunkcache.m_8481_().m_142051_(p_177897_);
          if (i < p_177897_.m_141937_()) {
@@ -429,6 +_,87 @@
       serverleveldata.m_5458_(GameType.SPECTATOR);
    }
 
+   public void initWorld(ServerLevel internal, PrimaryLevelData worlddata, PrimaryLevelData worlddata1, WorldGenSettings worldGenSettings) {
+      boolean flag = worldGenSettings.m_64668_();
+      if (internal.generator != null) {
+         internal.getWorld().getPopulators().addAll(internal.generator.getDefaultPopulators(internal.getWorld()));
+      }
+      WorldBorder worldBorder = internal.m_6857_();
+      worldBorder.m_61931_(worlddata.m_5813_());
+      if (!worlddata.m_6535_()) {
+         try {
+            m_177896_(internal, worlddata, worldGenSettings.m_64660_(), flag);
+            worlddata.m_5555_(true);
+            if (flag) {
+               this.m_129847_(this.f_129749_);
+            }
+         } catch (Throwable throwable) {
+            CrashReport crashreport = CrashReport.m_127521_(throwable, "Exception initializing level");
+            try {
+               internal.m_6026_(crashreport);
+            } catch (Throwable throwable2) {
+               // empty catch block
+            }
+            throw new ReportedException(crashreport);
+         }
+         worlddata.m_5555_(true);
+      }
+   }
+
+   public void prepareLevels(ChunkProgressListener progressListener, ServerLevel internal) {
+      this.markWorldsDirty();
+      // LoliServer start - Fix Multiverse
+      if (!internal.isBukkitWorld) {
+         try {
+            File bukkitWorldDir = new File(m_129783_().convertable.getWorldDir().toFile(), f_129744_.m_78277_());
+            if (!bukkitWorldDir.exists()) {
+               bukkitWorldDir.mkdir(); // Create empty dir to bypass Multiverse-Core check
+            }
+         } catch (Exception e) {
+            System.out.println(e.toString());
+         }
+      }
+      // LoliServer end
+      Bukkit.getPluginManager().callEvent(new WorldInitEvent(internal.getWorld()));
+      Bukkit.getPluginManager().callEvent(new WorldLoadEvent(internal.getWorld()));
+      MinecraftForge.EVENT_BUS.post(new LevelEvent.Load(internal));
+      if (!internal.getWorld().getKeepSpawnInMemory()) {
+         return;
+      }
+      this.forceTicks = true;
+      f_129750_.info("Preparing start region for dimension {}", internal.m_46472_().m_135782_());
+      BlockPos blockpos = internal.m_220360_();
+      progressListener.m_7647_(new ChunkPos(blockpos));
+      ServerChunkCache serverchunkprovider = internal.m_7726_();
+      serverchunkprovider.m_7827_().m_9310_(500);
+      this.f_129726_ = Util.m_137550_();
+      serverchunkprovider.m_8387_(TicketType.f_9442_, new ChunkPos(blockpos), 11, Unit.INSTANCE);
+
+      while (serverchunkprovider.m_8427_() < 441) {
+         this.executeModerately();
+      }
+
+      this.executeModerately();
+
+      ForcedChunksSavedData forcedchunkssavedata = internal.m_8895_().m_164858_(ForcedChunksSavedData::m_151483_, "chunks");
+      if (forcedchunkssavedata != null) {
+         LongIterator longiterator = forcedchunkssavedata.m_46116_().iterator();
+
+         while (longiterator.hasNext()) {
+            long i = longiterator.nextLong();
+            ChunkPos chunkpos = new ChunkPos(i);
+            internal.m_7726_().m_6692_(chunkpos, true);
+         }
+         net.minecraftforge.common.world.ForgeChunkManager.reinstatePersistentChunks(internal, forcedchunkssavedata);
+      }
+      this.executeModerately();
+      progressListener.m_7646_();
+      serverchunkprovider.m_7827_().m_9310_(5);
+      // this.updateMobSpawningFlags();
+      internal.m_46703_(this.m_7004_(), this.m_6998_());
+      this.forceTicks = false;
+   }
+
    private void m_129940_(ChunkProgressListener p_129941_) {
       ServerLevel serverlevel = this.m_129783_();
       f_129750_.info("Preparing start region for dimension {}", (Object)serverlevel.m_46472_().m_135782_());
@@ -457,6 +_,7 @@
                ChunkPos chunkpos = new ChunkPos(i);
                serverlevel1.m_7726_().m_6692_(chunkpos, true);
             }
+            net.minecraftforge.common.world.ForgeChunkManager.reinstatePersistentChunks(serverlevel1, forcedchunkssaveddata);
          }
       }
 
@@ -526,7 +_,25 @@
       this.m_7041_();
    }
 
+   // CraftBukkit start
+   private boolean hasStopped = false;
+   private final Object stopLock = new Object();
+   public final boolean hasStopped() {
+      synchronized (stopLock) {
+         return hasStopped;
+      }
+   }
+   // CraftBukkit end
+
    public void m_7041_() {
+      if (m_130010_() && m_6982_()) net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.GameShuttingDownEvent());
+
+      // CraftBukkit start - prevent double stopping on multiple threads
+      synchronized(stopLock) {
+         if (hasStopped) return;
+         hasStopped = true;
+      }
+      // CraftBukkit end
       if (this.f_177872_.m_142763_()) {
          this.m_236737_();
       }
@@ -536,12 +_,20 @@
          this.m_129919_().m_9718_();
       }
 
+      // LoliServer - Kick out the player before disabling the plugin
       this.f_195494_ = true;
       if (this.f_129763_ != null) {
          f_129750_.info("Saving players");
          this.f_129763_.m_11302_();
          this.f_129763_.m_11313_();
-      }
+         try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
+      }
+
+      // CraftBukkit start
+      if (this.server != null) {
+         this.server.disablePlugins();
+      }
+      // CraftBukkit end
 
       f_129750_.info("Saving worlds");
 
@@ -571,6 +_,7 @@
       for(ServerLevel serverlevel2 : this.m_129785_()) {
          if (serverlevel2 != null) {
             try {
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.LevelEvent.Unload(serverlevel2));
                serverlevel2.close();
             } catch (IOException ioexception1) {
                f_129750_.error("Exception closing the level", (Throwable)ioexception1);
@@ -613,12 +_,72 @@
 
    }
 
+   // Spigot Start
+   private static double calcTps(double avg, double exp, double tps)
+    {
+       return ( avg * exp ) + ( tps * ( 1 - exp ) );
+    }
+
+   // Paper start - Further improve server tick loop
+   private static final long SEC_IN_NANO = 1000000000;
+   private static final long MAX_CATCHUP_BUFFER = TICK_TIME * TPS * 60L;
+   private long lastTick = 0;
+   private long catchupTime = 0;
+   public final RollingAverage tps5s = new RollingAverage(5); // Purpur
+   public final RollingAverage tps1 = new RollingAverage(60);
+   public final RollingAverage tps5 = new RollingAverage(60 * 5);
+   public final RollingAverage tps15 = new RollingAverage(60 * 15);
+
+   public static class RollingAverage {
+      private final int size;
+      private long time;
+      private java.math.BigDecimal total;
+      private int index = 0;
+      private final java.math.BigDecimal[] samples;
+      private final long[] times;
+
+      RollingAverage(int size) {
+         this.size = size;
+         this.time = size * SEC_IN_NANO;
+         this.total = dec(TPS).multiply(dec(SEC_IN_NANO)).multiply(dec(size));
+         this.samples = new java.math.BigDecimal[size];
+         this.times = new long[size];
+         for (int i = 0; i < size; i++) {
+            this.samples[i] = dec(TPS);
+            this.times[i] = SEC_IN_NANO;
+         }
+      }
+
+      private static java.math.BigDecimal dec(long t) {
+         return new java.math.BigDecimal(t);
+      }
+      public void add(java.math.BigDecimal x, long t) {
+         time -= times[index];
+         total = total.subtract(samples[index].multiply(dec(times[index])));
+         samples[index] = x;
+         times[index] = t;
+         time += t;
+         total = total.add(x.multiply(dec(t)));
+         if (++index == size) {
+            index = 0;
+         }
+      }
+
+      public double getAverage() {
+         return total.divide(dec(time), 30, java.math.RoundingMode.HALF_UP).doubleValue();
+      }
+   }
+   private static final java.math.BigDecimal TPS_BASE = new java.math.BigDecimal(1E9).multiply(new java.math.BigDecimal(SAMPLE_INTERVAL));
+   // Paper End
+    // Spigot End
+
    protected void m_130011_() {
       try {
          if (!this.m_7038_()) {
             throw new IllegalStateException("Failed to initialize server");
          }
 
+         net.minecraftforge.server.ServerLifecycleHooks.handleServerStarted(this);
          this.f_129726_ = Util.m_137550_();
          this.f_129757_.m_134908_(Component.m_237113_(this.f_129709_));
          this.f_129757_.m_134912_(new ServerStatus.Version(SharedConstants.m_183709_().getName(), SharedConstants.m_183709_().getProtocolVersion()));
@@ -626,20 +_,46 @@
          this.f_129757_.m_242958_(this.m_214005_());
          this.m_129878_(this.f_129757_);
 
+         // Spigot start
+         Arrays.fill( recentTps, 20 );
+         long start = System.nanoTime(), curTime, tickSection = start; // Paper - Further improve server tick loop
+         lastTick = start - TICK_TIME; // Paper
          while(this.f_129764_) {
-            long i = Util.m_137550_() - this.f_129726_;
+            long i = ((curTime = System.nanoTime()) / (1000L * 1000L)) - this.f_129726_; // Paper
             if (i > 2000L && this.f_129726_ - this.f_129718_ >= 15000L) {
                long j = i / 50L;
-               f_129750_.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
+               //LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j); // LoliServer - disable Cant keep up warn
                this.f_129726_ += j * 50L;
                this.f_129718_ = this.f_129726_;
             }
 
+            if ( ++MinecraftServer.currentTick % MinecraftServer.SAMPLE_INTERVAL == 0 )
+            {
+               final long diff = curTime - tickSection;
+               java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP);
+               tps5s.add(currentTps, diff); // Purpur
+               tps1.add(currentTps, diff);
+               tps5.add(currentTps, diff);
+               tps15.add(currentTps, diff);
+               // Backwards compat with bad plugins
+               // Purpur start
+               this.recentTps[0] = tps5s.getAverage();
+               this.recentTps[1] = tps1.getAverage();
+               this.recentTps[2] = tps5.getAverage();
+               this.recentTps[3] = tps15.getAverage();
+               // Purpur end
+               // Paper end
+               tickSection = curTime;
+            }
+            // Spigot end
+
             if (this.f_177877_) {
                this.f_177877_ = false;
                this.f_177876_ = new MinecraftServer.TimeProfiler(Util.m_137569_(), this.f_129766_);
             }
 
+            MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit
+            lastTick = curTime;
             this.f_129726_ += 50L;
             this.m_177945_();
             this.f_129754_.m_6180_("tick");
@@ -653,6 +_,8 @@
             this.f_129717_ = true;
             JvmProfiler.f_185340_.m_183597_(this.f_129737_);
          }
+         net.minecraftforge.server.ServerLifecycleHooks.handleServerStopping(this);
+         net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
       } catch (Throwable throwable1) {
          f_129750_.error("Encountered an unexpected exception", throwable1);
          CrashReport crashreport = m_206568_(throwable1);
@@ -664,6 +_,7 @@
             f_129750_.error("We were unable to save this crash report to disk.");
          }
 
+         net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
          this.m_7268_(crashreport);
       } finally {
          try {
@@ -676,11 +_,12 @@
                this.f_236721_.f_214336_().m_196559_();
             }
 
+            org.spigotmc.WatchdogThread.doStop(); // Spigot
+            net.minecraftforge.server.ServerLifecycleHooks.handleServerStopped(this);
             this.m_6988_();
+            Runtime.getRuntime().halt(0);
          }
-
       }
-
    }
 
    private static CrashReport m_206568_(Throwable p_206569_) {
@@ -706,8 +_,15 @@
    }
 
    private boolean m_129960_() {
-      return this.m_18767_() || Util.m_137550_() < (this.f_129728_ ? this.f_129727_ : this.f_129726_);
-   }
+      // CraftBukkit start
+      return this.forceTicks || this.m_18767_() || Util.m_137550_() < (this.f_129728_ ? this.f_129727_ : this.f_129726_);
+   }
+
+   private void executeModerately() {
+      this.m_18699_();
+      java.util.concurrent.locks.LockSupport.parkNanos("executing tasks", 1000L);
+   }
+   // CraftBukkit end
 
    protected void m_130012_() {
       this.m_18699_();
@@ -716,7 +_,7 @@
       });
    }
 
-   protected TickTask m_6681_(Runnable p_129852_) {
+   public TickTask m_6681_(Runnable p_129852_) {
       return new TickTask(this.f_129766_, p_129852_);
    }
 
@@ -785,10 +_,12 @@
    }
 
    public void m_6988_() {
+      System.exit(0);
    }
 
    public void m_5705_(BooleanSupplier p_129871_) {
       long i = Util.m_137569_();
+      net.minecraftforge.event.ForgeEventFactory.onPreServerTick(p_129871_, this);
       ++this.f_129766_;
       this.m_5703_(p_129871_);
       if (i - this.f_129724_ >= 5000000000L) {
@@ -810,9 +_,10 @@
             Collections.shuffle(Arrays.asList(agameprofile));
             this.f_129757_.m_134914_().m_134924_(agameprofile);
          }
+         this.f_129757_.invalidateJson();
       }
 
-      if (this.f_129766_ % 6000 == 0) {
+      if (autosavePeriod > 0 && this.f_129766_ % autosavePeriod == 0) { // CraftBukkit
          f_129750_.debug("Autosave started");
          this.f_129754_.m_6180_("save");
          this.m_195514_(true, false, false);
@@ -826,24 +_,44 @@
       long i1 = Util.m_137569_();
       this.f_129735_.m_13755_(i1 - i);
       this.f_129754_.m_7238_();
+      org.spigotmc.WatchdogThread.tick(); // Spigot
+      net.minecraftforge.event.ForgeEventFactory.onPostServerTick(p_129871_, this);
    }
 
    public void m_5703_(BooleanSupplier p_129954_) {
+      this.server.getScheduler().mainThreadHeartbeat(this.f_129766_); // CraftBukkit
       this.f_129754_.m_6180_("commandFunctions");
       this.m_129890_().m_136128_();
       this.f_129754_.m_6182_("levels");
 
-      for(ServerLevel serverlevel : this.m_129785_()) {
+      // CraftBukkit start
+      // Run tasks that are waiting on processing
+      while (!processQueue.isEmpty()) {
+         processQueue.remove().run();
+      }
+      // Send time updates to everyone, it will get the right time from the world the player is in.
+      if (this.f_129766_ % 20 == 0) {
+         for (int i = 0; i < this.m_6846_().f_11196_.size(); ++i) {
+            ServerPlayer entityplayer = (ServerPlayer) this.m_6846_().f_11196_.get(i);
+            entityplayer.f_8906_.m_9829_(new ClientboundSetTimePacket(entityplayer.f_19853_.m_46467_(), entityplayer.getPlayerTime(), entityplayer.f_19853_.m_46469_().m_46207_(GameRules.f_46140_))); // Add support for per player time
+         }
+      }
+
+      for(ServerLevel serverlevel : this.getWorldArray()) {
+         long tickStart = Util.m_137569_();
          this.f_129754_.m_6521_(() -> {
             return serverlevel + " " + serverlevel.m_46472_().m_135782_();
          });
-         if (this.f_129766_ % 20 == 0) {
-            this.f_129754_.m_6180_("timeSync");
-            this.f_129763_.m_11270_(new ClientboundSetTimePacket(serverlevel.m_46467_(), serverlevel.m_46468_(), serverlevel.m_46469_().m_46207_(GameRules.f_46140_)), serverlevel.m_46472_());
-            this.f_129754_.m_7238_();
+         /* Drop global time updates
+         if (this.tickCount % 20 == 0) {
+            this.profiler.push("timeSync");
+            this.playerList.broadcastAll(new ClientboundSetTimePacket(serverlevel.getGameTime(), serverlevel.getDayTime(), serverlevel.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)), serverlevel.dimension());
+            this.profiler.pop();
          }
+          */
 
          this.f_129754_.m_6180_("tick");
+         net.minecraftforge.event.ForgeEventFactory.onPreLevelTick(serverlevel, p_129954_);
 
          try {
             serverlevel.m_8793_(p_129954_);
@@ -852,16 +_,18 @@
             serverlevel.m_6026_(crashreport);
             throw new ReportedException(crashreport);
          }
+         net.minecraftforge.event.ForgeEventFactory.onPostLevelTick(serverlevel, p_129954_);
 
          this.f_129754_.m_7238_();
          this.f_129754_.m_7238_();
+         perWorldTickTimes.computeIfAbsent(serverlevel.m_46472_(), k -> new long[100])[this.f_129766_ % 100] = Util.m_137569_() - tickStart;
       }
 
       this.f_129754_.m_6182_("connection");
       this.m_129919_().m_9721_();
       this.f_129754_.m_6182_("players");
       this.f_129763_.m_11288_();
-      if (SharedConstants.f_136183_) {
+      if (net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled()) {
          GameTestTicker.f_177648_.m_127790_();
       }
 
@@ -903,6 +_,22 @@
       return this.f_129762_.get(p_129881_);
    }
 
+   // CraftBukkit start
+   public void addLevel(ServerLevel level) {
+      Map<ResourceKey<Level>, ServerLevel> oldLevels = this.f_129762_;
+      Map<ResourceKey<Level>, ServerLevel> newLevels = Maps.newLinkedHashMap(oldLevels);
+      newLevels.put(level.m_46472_(), level);
+      this.f_129762_ = Collections.unmodifiableMap(newLevels);
+   }
+
+   public void removeLevel(ServerLevel level) {
+      Map<ResourceKey<Level>, ServerLevel> oldLevels = this.f_129762_;
+      Map<ResourceKey<Level>, ServerLevel> newLevels = Maps.newLinkedHashMap(oldLevels);
+      newLevels.remove(level.m_46472_());
+      this.f_129762_ = Collections.unmodifiableMap(newLevels);
+   }
+    // CraftBukkit end
+
    public Set<ResourceKey<Level>> m_129784_() {
       return this.f_129762_.keySet();
    }
@@ -929,7 +_,7 @@
 
    @DontObfuscate
    public String m_130001_() {
-      return "vanilla";
+      return LoliServer.SERVER_NAME; // LoliServer - forge -> LoliServer
    }
 
    public SystemReport m_177935_(SystemReport p_177936_) {
@@ -1121,7 +_,7 @@
    }
 
    public boolean m_214000_() {
-      return false;
+      return net.minecraftforge.common.ForgeMod.isServerChatPreviewEnabled();
    }
 
    public boolean m_129918_() {
@@ -1280,6 +_,7 @@
       }).thenAcceptAsync((p_212919_) -> {
          this.f_129740_.close();
          this.f_129740_ = p_212919_;
+         this.server.syncCommands(); // SPIGOT-5884: Lost on reload
          this.f_129730_.m_10509_(p_129862_);
          this.f_129749_.m_6645_(m_129817_(this.f_129730_));
          this.f_129740_.f_206585_.m_206868_(this.m_206579_());
@@ -1287,6 +_,7 @@
          this.m_6846_().m_11315_();
          this.f_129734_.m_136120_(this.f_129740_.f_206585_.m_206860_());
          this.f_236720_.m_230370_(this.f_129740_.f_206584_);
+         this.m_6846_().m_11314_().forEach(this.m_6846_()::m_11289_); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
       }, this);
       if (this.m_18695_()) {
          this.m_18701_(completablefuture::isDone);
@@ -1296,10 +_,13 @@
    }
 
    public static DataPackConfig m_129819_(PackRepository p_129820_, DataPackConfig p_129821_, boolean p_129822_) {
+      net.minecraftforge.resource.ResourcePackLoader.loadResourcePacks(p_129820_, net.minecraftforge.server.ServerLifecycleHooks::buildPackFinder);
       p_129820_.m_10506_();
+      DataPackConfig.f_45842_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
+      p_129821_.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
       if (p_129822_) {
-         p_129820_.m_10509_(Collections.singleton("vanilla"));
-         return DataPackConfig.f_45842_;
+         p_129820_.m_10509_(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla());
+         return new DataPackConfig(net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla(), ImmutableList.of());
       } else {
          Set<String> set = Sets.newLinkedHashSet();
 
@@ -1450,6 +_,31 @@
 
    public abstract boolean m_7779_(GameProfile p_129840_);
 
+   private Map<ResourceKey<Level>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(ResourceKey<Level> dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<ResourceKey<Level>, ServerLevel> forgeGetWorldMap() {
+      return this.f_129762_;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerLevel[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   private ServerLevel[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      worldArray = this.f_129762_.values().stream().toArray(x -> new ServerLevel[x]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void m_142116_(Path p_177911_) throws IOException {
    }
 
@@ -1710,6 +_,10 @@
       return this.f_129749_;
    }
 
+   public MinecraftServer.ReloadableResources getServerResources() {
+       return f_129740_;
+   }
+
    public RegistryAccess.Frozen m_206579_() {
       return this.f_129746_;
    }
@@ -1767,8 +_,27 @@
 
    }
 
+   // CraftBukkit start
+   public final java.util.concurrent.ExecutorService chatExecutor = java.util.concurrent.Executors.newCachedThreadPool(
+           new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async Chat Thread - #%d").build());
+
    public ChatDecorator m_236742_() {
-      return ChatDecorator.f_236947_;
+      return (entityplayer, ichatbasecomponent) -> {
+         // SPIGOT-7127: Console /say and similar
+         if (entityplayer == null) {
+            return CompletableFuture.completedFuture(ichatbasecomponent);
+         }
+         return CompletableFuture.supplyAsync(() -> {
+            AsyncPlayerChatPreviewEvent event = new AsyncPlayerChatPreviewEvent(true, entityplayer.getBukkitEntity(), CraftChatMessage.fromComponent(ichatbasecomponent), new LazyPlayerSet(this));
+            String originalFormat = event.getFormat(), originalMessage = event.getMessage();
+            this.server.getPluginManager().callEvent(event);
+            if (originalFormat.equals(event.getFormat()) && originalMessage.equals(event.getMessage()) && event.getPlayer().getName().equalsIgnoreCase(event.getPlayer().getDisplayName())) {
+               return ichatbasecomponent;
+            }
+            return CraftChatMessage.fromStringOrNull(String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage()));
+            }, chatExecutor);
+      };
+      // CraftBukkit end
    }
 
    public static record ReloadableResources(CloseableResourceManager f_206584_, ReloadableServerResources f_206585_) implements AutoCloseable {
@@ -1821,4 +_,19 @@
          };
       }
    }
+
+   @Deprecated
+   public static MinecraftServer getServer() {
+      return ( Bukkit.getServer() instanceof CraftServer) ? ((CraftServer) Bukkit.getServer()).getServer() : null;
+   }
+
+   @Override
+   public boolean m_18695_() {
+      return super.m_18695_() || this.m_129918_(); // CraftBukkit - MC-142590
+   }
+
+   public boolean isDebugging() {
+      return false;
+   }
+   // CraftBukkit end
 }
